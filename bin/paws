#!/usr/bin/env perl

use lib 'auto-lib', 'lib';

use strict;
use warnings;

use Data::Printer;
use Aws;
use Moose::Util;

my @args = @ARGV;
my @service_args;

my $service_name = shift @args;

my $method_name;

my $end = 0;
while ($end == 0 and my $next_arg = shift @args) {
  if ($next_arg =~ m/^--/) {
    push @service_args, $next_arg;
    $next_arg = shift @args;
    push @service_args, $next_arg; 
  } else {
    $method_name = $next_arg;
    $end = 1;
  }
}

die "no service specified" if (not defined $service_name);

my $aws;
if ($ENV{PAWS_CALLER}){
  $aws = Aws->new(
    config => AWS::SDK::Config->new(caller => $ENV{PAWS_CALLER})
  );
} else {
  $aws = Aws->new;
}

my $service = Moose::Util::with_traits(
  $aws->service($service_name), 'MooseX::Getopt'
)->new_with_options(@service_args);

my $call;

if (not defined $method_name or not $call = $service->meta->find_method_by_name($method_name)){
  if (defined $method_name) {
    print "Don't know method $method_name on $service_name\n\n";
  } else {
    print "Please specify a method for $service_name\n\n"
  }
  
  print "Maybe you ment:\n";
  print join "\n", sort 
                   map  { $_->name } 
                   grep { $_->package_name =~ m/^Aws\:\:/ and 
                          $_->name =~ m/^[A-Z]/ 
                        } 
                   $service->meta->get_all_methods;
  exit 1;
}

die "invalid method" if ($call->package_name !~ m/^Aws\:\:/);

my %args;

foreach (my $i = 0; $i < scalar(@args); $i++) {
  my $arg = $args[$i];
  my ($param, $value) = split /=/, $arg, 2;
  if ($value eq '[') {
   #Array collection mode
   $args{ $param } = [];
   $i++;
   while ($args[$i] ne ']' and $i < scalar(@args)) { push @{ $args{ $param } }, $args[$i]; $i++ }
  } else {
    $args{ $param } = $value;
  }
}

use Data::Dumper;
print Dumper(\%args);

# $call is a Meta Method Object. It can be called via execute
my $result = eval {$call->execute($service, %args) };
if ($@) {
  if ($@->isa('Moose::Exception::AttributeIsRequired')) {
    print "Call to $method_name requires argument " . $@->attribute_name . "\n";
  } else {
    die $@;
  }

  exit 1;
}

my $h = $service->to_hash($result);

if ($h) {
  use Hash::Flatten qw//;
  $h = Hash::Flatten::flatten($h, { HashDelimiter => '.', ArrayDelimiter => '.' });
}

use Data::Printer;
p %{ $h };

