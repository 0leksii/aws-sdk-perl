#!/usr/bin/env perl

use lib 'auto-lib', 'lib';

use 5.010;
use strict;
use warnings;

use Data::Printer;
use Paws;
use Moose::Util;
use ARGV::Struct;
use Term::ANSIColor 2.00 qw();
use Hash::Flatten qw//;
use List::Util qw(reduce);
use Module::Find;

my @args = @ARGV;
my @service_args;

my $service_name = shift @args;

my $method_name;

my $end = 0;
while ($end == 0 and my $next_arg = shift @args) {
  if ($next_arg =~ m/^--/) {
    push @service_args, $next_arg;
    $next_arg = shift @args;
    push @service_args, $next_arg; 
  } else {
    $method_name = $next_arg;
    $end = 1;
  }
}

my $aws;
if ($ENV{PAWS_CALLER}){
  $aws = Paws->new(
    config => Paws::SDK::Config->new(caller => $ENV{PAWS_CALLER})
  );
} else {
  $aws = Paws->new;
}

if (not defined $service_name) {
  say "A list of the services you have available";
  say $_ for (sort $aws->available_services);
  exit 1;  
}

my $service = Moose::Util::with_traits(
  $aws->service($service_name), 'MooseX::Getopt'
)->new_with_options(argv => \@service_args);

my $call;

if (not defined $method_name or not $call = $service->meta->find_method_by_name($method_name)){
  if (defined $method_name) {
    print "Don't know method $method_name on $service_name\n\n";
  } else {
    print "Please specify a method for $service_name\n\n"
  }
  
  print "Maybe you ment:\n";
  print join "\n", sort 
                   map  { $_->name } 
                   grep { $_->package_name =~ m/^Paws\:\:/ and 
                          $_->name =~ m/^[A-Z]/ 
                        } 
                   $service->meta->get_all_methods;
  exit 1;
}

die "invalid method" if ($call->package_name !~ m/^Paws\:\:/);

my $help_with_method_call = grep { $_ =~ m/^help$/i } @args;

die "HELP!!!" if ($help_with_method_call);

my %args = %{ ARGV::Struct->new(argv => [ '{', @args, '}' ])->parse };

# $call is a Meta Method Object. It can be called via execute
my $result = eval {$call->execute($service, %args) };
if ($@) {
  if ($@->isa('Moose::Exception::AttributeIsRequired')) {
    print "Call to $method_name requires argument " . $@->attribute_name . "\n";
  } else {
    die $@;
  }

  exit 1;
}

if (ref($result)) {
  my $h = $service->to_hash($result);
  $h = Hash::Flatten::flatten($h, { HashDelimiter => '.', ArrayDelimiter => '.' });

  my $max_chars = reduce { length($a) > length($b) ? length($a) : length($b) } keys %$h;
  #TODO: colorize
  say "$_: " . (' ' x ($max_chars - length($_))) .  $h->{ $_ } for (sort keys %$h);
}
