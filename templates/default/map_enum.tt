[%- -%]
package [% inner_class %];
  use Moo;
  with 'Paws::API::MapParser';

  use MooX::ClassAttribute;
  class_has xml_keys =>(is => 'ro', default => '[% iclass.key.locationName || 'key' %]');
  class_has xml_values =>(is => 'ro', default => '[% iclass.value.locationName || 'value' %]');

[%- member = c.shape(iclass.value.shape); -%]
  use Types::Standard qw/[% member.perl_type %]/;
[% FOREACH param_name=keys_shape.enum.sort -%]
  has [% param_name %] => (is => 'ro', isa => [% member.perl_type %]);
[% END -%]

  sub params_map {
    our $Params_map ||= {
                    types => {
[% FOREACH param_name=keys_shape.enum.sort -%]
                               '[% param_name %]' => {
                                          type => '[% member.perl_type %]',
                                        },
[% END -%]
                             },
                  };
    return $Params_map;
  }

1;

[% INCLUDE 'map_enum_documentation.tt' %]
