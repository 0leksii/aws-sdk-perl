[%- -%]
package [% inner_class %];
  use Moo;
[%- attr_str = []; attr_types = []; attr_ind = 0; class_types = {}; params_hash = {}; -%]
[% FOREACH param_name IN shape.members.keys.sort;
  member_shape_name = shape.members.$param_name.shape;
  member = c.shape(member_shape_name);
  attr_str.$attr_ind = "has $param_name => (is => 'ro', isa => ${member.perl_type}";
  IF (c.required_in_shape(shape,param_name)); attr_str.$attr_ind = attr_str.$attr_ind _ ", required => 1);"; ELSE; attr_str.$attr_ind = attr_str.$attr_ind _ ");"; END;
  CALL attr_types.import(member.base_types.keys);
  params_hash.types.$param_name = { type => member.perl_type };
  FOREACH k IN member.class_type_info.keys; class_types.$k = member.class_type_info.$k; params_hash.types.$param_name.class = member.class_type_info.$k; END;
  IF (member.type == 'list' and member.member.locationName.defined); params_hash.NameInRequest = member.member.locationName; END;
  IF (shape.members.${param_name}.locationName); params_hash.NameInRequest.$param_name = shape.members.${param_name}.locationName; END;
  IF (shape.members.$param_name.streaming == 1); params_map.ParamInBody.push(param_name); END;
  encoder = c.encoders_struct.$member_shape_name; IF (encoder); param_map.JSONAttribute.decode_as = encoder.encoding; param_map.JSONAttribute.method = encoder.alias; END;
  IF (member.members.xmlname and (member.members.xmlname != 'item')); params_hash.NameInRequest = member.members.xmlname; END;
  SET attr_ind = attr_ind + 1;
END; %]
  use Types::Standard qw/[% attr_types.unique.join(" ") %]/;
  use [% c.typelibrary_name %] qw/[% class_types.keys.join(" ") %]/;
[% FOREACH attr IN attr_str -%]
  [% attr %]
[% END -%]

  [% PROCESS params_map.tt %]

1;

[% iclass=shape; INCLUDE 'innerclass_documentation.tt' %]
