[%- operation = c.result_for_operation(op_name) %]
[%- shape = c.result_for_operation(op_name) %]
[%- IF (shape) %]
package [% c.api %]::[% c.shapename_for_operation_output(op_name) %];
  use Moo;
[%- attr_str = []; attr_types = ['Str']; attr_ind = 0; class_types = {}; params_hash = {}; -%]
[% FOREACH param_name IN shape.members.keys.sort;
  member = c.shape(shape.members.$param_name.shape);
  attr_str.$attr_ind = "has $param_name => (is => 'ro', isa => ${member.perl_type}";
  IF (c.required_in_shape(shape,param_name)); attr_str.$attr_ind = attr_str.$attr_ind _ ", required => 1);"; ELSE; attr_str.$attr_ind = attr_str.$attr_ind _ ");"; END;

  IF (shape.members.${param_name}.locationName); params_hash.NameInRequest = shape.members.${param_name}.locationName; END;
  IF (shape.members.$param_name.streaming == 1); params_hash.ParamInBody.push(param_name); END;
  CALL attr_types.import(member.base_types.keys);
  params_hash.types.$param_name = { type => member.perl_type };
  FOREACH k IN member.class_type_info.keys; class_types.$k = member.class_type_info.$k; params_hash.types.$param_name.class = member.class_type_info.$k; END;
  SET attr_ind = attr_ind + 1;
END -%]

  use Types::Standard qw/[% attr_types.unique.join(" ") %]/;
  [% IF class_types.keys;'use Type::Utils qw/class_type/;'; END;  %]
  [% FOREACH cl = class_types.keys -%]
  my [% cl %] = class_type '[% class_types.$cl %]';
  [% END %]
[% FOREACH attr IN attr_str -%]
  [% attr %]
[% END -%]

  has _request_id => (is => 'ro', isa => Str);
  sub params_map {
    my [% USE Dumper(Varname='params',Indent=2); Dumper.dump(params_hash); %]
    return $params1;
  }
[%- END %]

[% INCLUDE 'class_documentation.tt' %]
1;